{
  "name": "Génération Audio",
  "nodes": [
    {
      "parameters": {
        "path": "generate-audio",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Récupérer le fichier JSON\nconst jsonData = $input.item.json;\n\n// Vérifier la structure\nif (!jsonData.segments || !Array.isArray(jsonData.segments)) {\n  throw new Error('Format JSON invalide : segments manquants');\n}\n\n// Préparer les segments\nconst segments = jsonData.segments.map(segment => ({\n  start: segment.start,\n  end: segment.end,\n  text: segment.text_translated || segment.text\n}));\n\nreturn { segments };"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "command": "mkdir -p /tmp/audio_segments"
      },
      "name": "Execute Command",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        650,
        300
      ]
    },
    {
      "parameters": {
        "mode": "forEach",
        "value": "={{ $json.segments }}",
        "options": {}
      },
      "name": "Split In Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [
        850,
        300
      ]
    },
    {
      "parameters": {
        "command": "gtts-cli '{{ $json.text }}' --lang fr --output /tmp/audio_segments/segment_{{ $index }}.mp3"
      },
      "name": "Execute Command",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1050,
        300
      ]
    },
    {
      "parameters": {
        "command": "ffmpeg -i /tmp/audio_segments/segment_{{ $index }}.mp3 -af \"apad=pad_dur={{ $json.end - $json.start }}\" -ar 16000 -ac 1 /tmp/audio_segments/segment_{{ $index }}_padded.wav"
      },
      "name": "Execute Command",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1250,
        300
      ]
    },
    {
      "parameters": {
        "command": "ffmpeg -f concat -safe 0 -i <(for f in /tmp/audio_segments/segment_*_padded.wav; do echo \"file '$f'\"; done) -c copy /tmp/output.wav"
      },
      "name": "Execute Command",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1450,
        300
      ]
    },
    {
      "parameters": {
        "command": "rm -rf /tmp/audio_segments"
      },
      "name": "Execute Command",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1650,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "file",
        "options": {
          "filePath": "/tmp/output.wav",
          "fileName": "audio_generated.wav"
        }
      },
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1850,
        300
      ]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command1": {
      "main": [
        [
          {
            "node": "Execute Command2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command2": {
      "main": [
        [
          {
            "node": "Execute Command3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command3": {
      "main": [
        [
          {
            "node": "Execute Command4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command4": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
} 